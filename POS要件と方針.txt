## Sakatsu_POS 開発：AI が恒久的に理解すべき要件と方針

### 1. システム概要
- **対象店舗**：さかつうギャラリー実店舗  
- **連携先**：Next Engine API  
- **役割**：POS操作から会計・在庫管理・日次／月次バックオフィス処理までを一気通貫で担う  

### 2. 在庫同期（五月雨式・即時同期）
- **タイミング**：会計完了ごとに即時  
- **処理内容**：  
  1. POSでの売上情報を JSON ファイルに保存  
  2. `InventoryUpdater.update_from_record()` を呼び出し、Next Engine側の在庫数を減算・更新  
- **自動連係**：アプリ起動中は自動で同期し、同期失敗時はログ／UIで通知  

### 3. 日次処理（手動トリガー）
- **操作方法**：POS UIの「日次処理実行」ボタンを押下  
- **レシート印刷項目**（人間が理解できる４つの金額）  
  1. 現金売上  
  2. その他売上  
  3. 総合計売上  
  4. 売上に関係しない現金入出金  
- **API連携①**：  
  - 当日の売上商品・数量をまとめ、「実店舗」という仮想サイトの注文データとしてNext Engineへアップロード  
- **API連携②**：  
  - Next Engineから最新の商品マスタをダウンロードし、POSシステム内の商品情報を更新  

### 4. 月次処理（手動トリガー）
- **操作方法**：同じく手動で実行  
- **要件**：日次と同様の４つの金額をレシート印刷できれば十分  

### 5. 開発方針（必須チェックプロセス）
1. **現状把握**  
   - 変更前に必ず既存コードと仕様をレビューし、影響範囲を整理。  
2. **影響範囲確認**  
   - 他モジュールへの影響がないか設計段階で把握し、必要あれば先に依存修正を行う。  
3. **ドキュメント反映**  
   - コード変更と同時に README/仕様書に追記し、コードと文書の一貫性を保つ。  
4. **テスト方針明示**  
   - 提案時に「手動テスト手順」や「自動テストケース」を必ず提示し、検証予定を明示。  
5. **品質保証プロセス**  
   - UI要件チェックリスト、PR時スクリーンショット、マージ前E2Eテスト、ドキュメント同期  
6. **用語解釈ルール**  
   - 「変更します」…既存実装に追加・ブラッシュアップ  
   - 「今までの内容を破棄して新しいコードを提案します」…全面リセット  
7. **開発環境**  
   - 開発参加者は AI とユーザー。ユーザー1名のため、役割分担やスケジュール提案は不要  
   - ユーザーはプログラムやサーバーの専門知識を有していないため、わかりやすい概念説明と具体的アクション提案を行う  
8. **モジュール単位での機能分割**  
   - **単一責任原則（SRP）** に従い、各モジュールは「１つの論理的責務」のみを担当する。  
   - **行数上限：250行** を原則とし、超えた場合は責務ごとに分割を検討する。  
   - **関数・メソッド数上限：10個** を目安とする。クラス内メソッドも含む。  
   - **クラス数上限：3個**。1ファイルに定義するクラスは3つまで。  
   - **関数長上限：30行**。内部ロジックが複雑な場合はヘルパー関数へ切り出す。  
   - **依存管理：** モジュール間の循環参照禁止。役割別フォルダ構成を厳守する。
9. **ロギング利用とファイル名コメント**  
   - 各モジュールの先頭で、`from logger import get_logger` → `log = get_logger(__name__)` を必ず記述する。  
   - 同じく先頭行に、モジュールのパスとファイル名をコメントで明記する（例：`# ui/pos_gui.py`）。 

