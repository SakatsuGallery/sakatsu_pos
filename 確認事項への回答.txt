1. 環境設定関連の確認事項
サーバー構成・OS

本番／開発環境で利用している OS とそのバージョン

開発ではNext EngineのRedirect URIを通すためにngrok（無料枠）を利用しています。POSシステム端末にあたるWin11（ノートPC）がそのまま開発環境です。
Python 3.13.2 (tags/v3.13.2:4f8bb39, Feb  4 2025, 15:23:48) [MSC v.1942 64 bit (AMD64)] on win32

本番では、ngrok（無料枠）でアドレスが毎回変更されることを避けるため、さくらインターネット・スタンダードプランにサーバーを立てて対応したいです。
さくらインターネットの情報
ホスト名
www3451.sakura.ne.jp
IPアドレス
IPv4: 49.212.235.191
IPv6: 2403:3a00:101:22:49:212:235:191
OSバージョン
FreeBSD 13.0-RELEASE-p14 amd64
CPU
AMD EPYC-Rome Processor
メモリ容量
48GB
Webサーバー
Apache/2.4.62
Perl
バージョン5.14.4
PHP
8.3.8 (モジュールモード)
SSLに関する情報
https://help.sakura.ad.jp/rs/2827-2/

データベース接続情報

DB ホスト／ポート／ユーザー名／パスワード／DB 名の管理場所

回答可能な範囲：現在、.env（あるいは .env.example） に Next Engine 連携用の認証情報を記載していますが、POS アプリ本体で利用するローカルデータベース（SQLite／MySQL など）の接続情報は明示されていません。現在はデータベースを設定してません。

調査が必要：コード中で database_url 相当の設定を参照している箇所（おそらく logic/ や models/ フォルダー配下）を探し、環境変数名や設定ファイル場所を特定してください。

マイグレーション手順・スキーマ変更履歴

調査が必要：もし Alembic（Python）や Liquibase などのマイグレーションツールを使っているのであれば、その設定ファイル（alembic.ini など）やリビジョンファイルがリポジトリ内にあるはずです。見当たらない場合は「手動で SQL を実行している」可能性があるため、過去のスキーマ変更履歴をドキュメント化している場所を確認してください。

環境変数・認証情報

.env に含まれるキー名と例（NE_API_TOKEN、NEXTENGINE_CLIENT_ID、NEXTENGINE_CLIENT_SECRET など）の正確な値・フォーマット

回答可能な範囲：

.env.example サンプルでは以下の項目を想定しています（値はサンプル）。

makefile
コピーする
編集する
NE_CLIENT_ID=            # Your Next Engine Client ID
NE_CLIENT_SECRET=        # Your Next Engine Client Secret
NE_REDIRECT_URI=         # e.g. https://127.0.0.1:8443/callback

NE_ACCESS_TOKEN=
NE_REFRESH_TOKEN=

APP_ENV=development      # development or production
LOG_LEVEL=DEBUG
実運用用 .env ファイルには、Next Engine のクライアントID・クライアントシークレットおよび取得済みのアクセストークン／リフレッシュトークンを正確に記載しておく必要があります。

調査が必要：テスト環境と本番環境それぞれで使うトークンの「接続先 URL」「スコープ（読み取り／更新権限）」などの違いも再度ご確認ください。

テスト環境用トークンと本番環境用トークンの違い

回答可能な範囲：

テスト環境（simulate=True ／ api.test.next-engine.org）と本番環境（simulate=False ／ api.next-engine.org）で、リダイレクト URI が多少異なる場合があります。

スコープそのものは同じですが、テスト環境向けに発行されたアクセストークンは本番環境エンドポイントでは通用しないため、別途本番環境用のアクセストークンを取得する必要があります。

CI/CD／デプロイフロー

デプロイ手順書・スクリプトの有無

調査が必要：リポジトリ内や Wiki、あるいは社内資料で「Git Push → 自動デプロイ」などのフローを記載したものがないかをご確認ください。現在、ローカルでの手動操作が中心で、自動化スクリプトは実装されていないように見受けられます。

自動テスト実行環境・カバレッジレポートの参照場所

回答可能な範囲：現状、pytest を requirements.txt で導入済みですが、テストコード（tests/ フォルダなど）や GitHub Actions／Jenkins の設定ファイル（.github/workflows/ 以下など）はリポジトリ内に見当たりませんでした。

もし自動テストを CI で実行している場合は、その設定ファイルをリポジトリに追加するか、別途共有をお願いします。

2. Next Engine 連携関連の確認事項
API エンドポイントと認証フロー

利用中のエンドポイント一覧（テスト／本番）と認証方式のフロー図の有無

回答可能な範囲：現状コードで利用している主なエンドポイントは以下の通りです。

在庫更新（マスター更新）:

テスト環境: https://api.test.next-engine.org/api_v1_master_goods/upload

本番環境: https://api.next-engine.org/api_v1_master_goods/upload

受注一括登録（売上アップロード）:

テスト: https://api.test.next-engine.org/api_v1_order/input（仮称、実際のパスは都度ご確認ください）

本番: https://api.next-engine.org/api_v1_order/input

トークンリフレッシュ:

テスト: https://api.test.next-engine.org/api_neauth/refresh_token

本番: https://api.next-engine.org/api_neauth/refresh_token

OAuth2 認可用:

認可コード取得:

テスト: https://api.test.next-engine.org/api_neauth?response_type=code&uid=<CLIENT_ID>&redirect_uri=<REDIRECT_URI>&state=<RANDOM_STRING>

本番: https://api.next-engine.org/api_neauth?response_type=code&uid=<CLIENT_ID>&redirect_uri=<REDIRECT_URI>&state=<RANDOM_STRING>

調査が必要：Flowchart 化された認証フロー図が別途あれば、そのファイルを提示してください。現在、コード内とこれまでの会話で断片的に出ていますが、全体を俯瞰した図はまだありません。

リダイレクト URI やスコープの設定検証

回答可能な範囲：

テスト時は ngrok を使って https://<ngrok-domain>/callback を指定し、Next Engine 管理画面にも同じものを登録済みとのこと。

本番環境では、実際の公開サーバー（例：https://shop.sakatsu.jp/callback）をリダイレクト URI に登録する必要があります。これをさくらインターネットで実現したいです。

調査が必要：本番用のリダイレクト URI が管理画面で正しく登録されているか最終確認してください。

商品コードとマスタ連携

POS 側の「商品コード」と Next Engine 側の goods_id または JAN/EAN のマッピングテーブルの所在

回答可能な範囲：現在、在庫更新用 CSV のヘッダーは goods_id,zaiko_su となっており、POS 側で管理している商品ごとの「syohin_code」を Next Engine 側の syohin_code（旧 goods_id 相当）として扱っています。

POS の内部コードと Next Engine のマスタを紐づけるテーブルは、data/product_master.json のような形式で保管している想定ですが、リポジトリ内には具体的なマッピングファイルが見当たりません。現時点ではまだマッピングファイルを作成できていません。

新規商品登録時の扱い

回答可能な範囲：現状コードでは、在庫更新処理の際に Next Engine 側に存在しない goods_id があればエラーを返します。

仕様としては「新規商品は登録済みマスタに存在しない → 日次バッチの売上アップロード時にエラーとなり、UI に通知する」、もしくは「該当レコードのみスキップして残り同期」という挙動を実装する必要があります。

要検討：新規商品を自動的に Next Engine へ先に登録するフローを組むか否かは運用要件をご検討ください。現在は明確なフローが決まっていないため、ユーザー様側でマスタ先行登録を行う扱いが推奨されます。

在庫更新タイミングと粒度

会計ごとの即時在庫減算と「タイムラグ30分許容」の兼ね合い

回答可能な範囲：コード中では、POS で会計（売上登録）が完了するたびに InventoryUpdater.update_from_record(json_path) を呼び出し、即時に Next Engine へ POST しています。30分以内に失敗した場合は、エラーを記録し UI 表示（ステータスバー）またはログに残す仕様です。

再試行ポリシーは「会計後すぐにトライ → 失敗時はレコードを pending/ フォルダへ移動 → 以降 11 時、12 時などの定期バッチ（CRON 相当）で再送 → 成功したら success/ フォルダへ移動」という 2 段階です。

調査が必要：失敗時の間隔（10 分おき／30 分後一括送信など）の具体的回数・間隔設定を仕様書に明確化してください。現在は「毎時 0 分」としていますが、超過時刻を考慮してよいかのすり合わせが必要です。

日次一括アップロード時のファイルフォーマット

回答可能な範囲：日次バッチでアップロードする売上 CSV は、以下のフィールドを持つ JSON を元に生成しています。

JSON 例：

json
コピーする
編集する
{
  "cart": [
    {"goods_id": "140015000015", "quantity": 2, "unit_price": 300},
    {"goods_id": "140006400015", "quantity": 1, "unit_price": 500}
  ],
  "order_id": "ORD-20250530-0001",
  "order_date": "2025-05-30T12:34:56"
}
生成される CSV ヘッダー（売上アップロード用）：

コピーする
編集する
syohin_code, suuryo, tanka, gokei
調査が必要：最新の Next Engine 側「受注一括登録」用 CSV フォーマット（必須カラム、オプションカラム、フィールド順、文字コード Shift_JIS／UTF-8）は公式マニュアルを参照し、最終確認をお願いします。

エラー時の例外ハンドリング

Next Engine API の主なエラーコードと例外クラスおよびリトライ戦略・UI 通知方法の有無

回答可能な範囲：現状コードで扱っている主なエラーコードは以下の通りです。

001001／001002 … リフレッシュ時の uid／state 未設定エラー → インタラクティブ認証（バッチ呼び出し）へフォールバック

002002 … アクセストークン不正／期限切れ → リフレッシュ or 再認証

006002 … 売上アップロード時の data_type 未指定エラー → コード生成時の不整合（バグ）として修正済み

999999 … セキュリティポリシー違反（IP制限など） → IP ホワイトリスト設定、ngrok 経由などの対応検討

調査が必要：実装済みの UI（ステータスバーやダイアログ表示）を参照し、「エラー発生時どのようにユーザーへ通知するか」「何回リトライするか」を仕様書としてまとめてください。

3. ハードウェア連携関連の確認事項
レシートプリンタ／キャッシュドロワー連携

利用予定のサーマルプリンタ情報（型番、ドライバ版、コマンドセット）

回答可能な範囲：

型番：MUNBYN レシートプリンター 高速印刷 USB/Ethernet/WiFi 対応・感熱式（型番 B0CKV7CQ38）

コマンドセット：ESC/POS コマンド（Shift_JIS で印字する想定）

ドライバ：Windows 用 ESC/POS ドライバ（公式サイトからダウンロード）が利用可能です。

調査が必要：実際の印字幅（58mm か 80mm か）を確認し、コード中のレイアウト（改行・タブ）を調整してください。

キャッシュドロワー接続方法（ドロワーキック信号など）

回答可能な範囲：

ESC/POS コマンド ESC p 0 25 250（ドロワーオープン）をプリンタへ送ると、プリンタ経由でキャッシュドロワーが開きます。

実装ライブラリとしては python-escpos などがありますが、現状コードでは直接シリアルポート／USB 経由でバイト列を送信する実装になっています。

調査が必要：使用するキャッシュドロワーの接続インターフェース（プリンタ側から給電か独立電源か）をご確認ください。また、pyserial 設定（ボーレート等）を正確に合わせる必要があります。

バーコードスキャナ

モデルおよびインターフェース

回答可能な範囲：

USB接続のハンディ型バーコードリーダを利用しており、キーワード入力と同等の入力です。
英数文字列とエンターが入力されます。
ドライバーなどはWin11側で対応しているのでPOSシステムでは特別な処理はしていません。
イベント処理は serial.read() を常時ループで行い、タブ区切り文字が来たらレジの入力プロセスへ引き渡す実装です

キャッシュドロワー／カスタマーディスプレイ

カスタマーディスプレイ表示情報の仕様

回答可能な範囲：

POS アプリ起動時に左上に固定表示する「合計金額」「最後の商品名」を表示する箇所があります。Tkinter のラベルウィジェットで実装済みです。

追加要件として「接続エラー時や Next Engine API エラー時にステータスバーに赤文字で警告を表示」「詳細はクリックで別ダイアログを出す」機能を実装中です。

調査が必要：実際に現場でどのような画面レイアウトが望ましいか、事前に UI モックを作成して確認してください。

QR 決済・クレジットカード端末

QR 決済連携（確認操作のみ想定）のドキュメント所在

要確認：当初「確認操作のみ」とのことでしたが、実装案としては「B2B 向け QR コード生成（決済用 URL）を表示 → 顧客がスマホでスキャン → 成功レスポンスを webhook で受信 → POS 側で売上登録」という流れが想定されます。

調査が必要：QR 決済の決済代行会社（例：PayPay for Business、Square、Stripe など）の API ドキュメントを検討し、仕様に合致するものを選定してください。

クレジットカード端末連動フローの不明点

要検討：クレジット決済端末（Verifone など）を USB／シリアルで接続し、決済結果を JSON で受け取るフローは実装難易度が高いため、「当面は QR 決済のみ対応」「将来的にクレジット端末連動は外注」など運用ポリシーを決める必要があります。

4. テスト・品質保証関連の確認事項
手動テスト手順書

在庫同期・日次処理・月次処理の手動テスト手順（前提条件、操作手順、期待結果、後始末）

回答可能な範囲：現在、以下の流れで実行できます。

在庫同期テスト

POS にログインしてテスト商品をレジ打ち（QR コード／商品バーコードスキャン）

nextengine.inventory_updater.update_all() を呼び出し、reports/inventory_<日時>.csv が生成されることを確認

Next Engine 管理画面の「在庫一覧」で該当商品在庫が減算されていることを確認

日次処理テスト

POS 起動後、日中に複数の売上を登録しておく

POS メニューから「日次処理実行」ボタンをクリック

売上アップロードが成功し、Next Engine の「受注一覧」に該当レコードが反映されることを確認

月次処理テスト

日次テストと同様に売上を登録

POS メニューから「月次処理実行」ボタンをクリック

本番運用に合わせて帳票用 CSV／PDF が生成されることを確認

調査が必要：最新コードと合致する正確な手順書が必要です。

UI 要件チェックリスト・スクリーンショット例

調査が必要：docs/ui_checklist.xlsx のようなファイルが別途あれば、その場所を教えてください。なければ「どの画面で何をチェックするか」を時系列でリスト化する必要があります。

自動テストケース

ユニットテスト・E2E テストの一覧とカバレッジ状況

回答可能な範囲：リポジトリ内に tests/ というディレクトリは存在しませんでした。現在、ユニットテストは未整備です。

自動化の一環として、まずは pytest を用いた基本的なテストコード（test_inventory_updater.py、test_sales_uploader.py など）を作成し、GitHub Actions で実行するフローを組むことをおすすめします。

調査が必要：もし過去にテストコードを別ブランチや社内サーバーに保管している場合、その所在を確認してください。

CI 実行時の通知設定や再実行手順

現在実装なし：GitHub Actions や CircleCI などを導入していないため、自動テストの実行時に通知される仕組みは未実装です。今後の開発で導入を検討してください。

エラーログ・モニタリング

同期処理／API 連携エラーのログ出力方式

回答可能な範囲：

ログはすべて Python の logging モジュールでファイル（logs/logic.sales_recorder.log、logs/nextengine.sales_uploader.log など）へ出力しています。

エラー発生時はレベル ERROR で出力し、POS 画面のステータスバーに「赤文字で重大エラー」を表示する実装が入っています。

調査が必要：ログファイルのローテーション設定（例：1 日ごと／10MB ごとにローテート）をどうするか、また古いログの保管方針（何日分保存するか）も要決定です。

ログファイルの保管ポリシー

要協議：単一店舗かつスタッフ３名の運用であれば、「1 か月分のログを保持し、翌月に手動で削除」というシンプルな方針でも差し支えありません。要件に合わせて調整してください。

5. ドキュメント・リソース関連の確認事項
既存ドキュメント参照先

Sakatsu_POS_Specifications_20250527.zip 内のドキュメント一覧と役割

回答可能な範囲：以下は想定例です（実際のファイル名・構成は展開してご確認ください）。

requirements.txt … Python パッケージ依存リスト

README.md … プロジェクト概要・セットアップ手順

docs/ フォルダ内

architecture_overview.md … システム全体構成図とモジュール解説

api_specification.md … Next Engine 連携に使うエンドポイント一覧とリクエスト／レスポンス例

test_plan.md … 手動テストおよび自動テストの設計書

調査が必要：リポジトリに含まれる .docx や .pdf 形式のドキュメントがあれば、目次レベルでその内容を一覧化し、更新すべき箇所をマークしてください。

開発フロー・分担

現在の開発体制（AI 側・ユーザー側の担当範囲）

回答可能な範囲：

【AI 側】… 設計・コード生成、コードレビュー、検証手順の提示、ドキュメント作成支援

【ユーザー様】… 実運用サーバーへのデプロイ、現場調整、ハードウェア選定、運用ルール策定、アクセストークンの取得操作

調査が必要：今後チームメンバーが増える場合や外注が入る場合は、各自の権限・アクセス範囲を明確にしてください。

今後の開発スケジュール・マイルストーン

要協議：以下のような大まかなマイルストーン例を参考にスケジュールを立ててください。

第１週（6/10 頃）… 本番サーバー環境構築、必要ミドルウェアインストール

第２週（6/17 頃）… 在庫更新・売上アップロードの本番動作検証完了、ハードウェア連携テスト開始

第３週（6/24 頃）… UI最終調整、手動テスト完了、ドキュメント最終化

第４週（7/1 頃）… リリース、本番運用開始

依存ライブラリ・バージョン管理

requirements.txt の最新版所在

回答可能な範囲：リポジトリルートに配置されており、現状は以下のバージョンを指定しています。

shell
コピーする
編集する
requests>=2.32.0
python-dotenv>=1.1.0
pyserial>=3.5
pytest>=8.2.0
調査が必要：もし Pipfile や Pipfile.lock、poetry.lock などがある場合、それらもバージョン管理ファイルとして合わせて最新化してください。

外部サービス仕様変更時の方針

要協議：Next Engine API や決済代行会社の API 仕様変更は頻度が低いですが、変更通知を受け取るために各サービスの開発者向けメーリングリスト（もしくは Webhook 配信）を登録しておくことをおすすめします。

その他追加情報

コード中にハードコーディングされている値一覧

回答可能な範囲：

DATA_DIR="data"

REPORT_DIR="reports"

PENDING_DIR="data/pending"

SUCCESS_DIR="data/success"

RETRY_HOURS=[11, 12, 13, ...] など、定数的に指定されている箇所があります。

調査が必要：もし「タイムアウト値」「リトライ回数」「ログファイルの最大サイズ」などがソース中に直接数値で書かれている場合、外部設定に出すべきかどうか検討してください。

ローカル実行環境と本番環境で差が出る設定項目

回答可能な範囲：

ローカル:

simulate=True でテスト用エンドポイントにのみ接続、すべての POST をシミュレーション

.env.test を利用し、本番トークンは不要

本番:

simulate=False で実際の Next Engine 本番エンドポイントへ接続

.env に格納された本番アクセストークン／リフレッシュトークンを利用

調査が必要：その他、プリンタドライバのパス（Windows と Linux で異なる）、バーコードスキャナのポート指定（COM3 vs /dev/ttyS0）など、環境依存の差分があればまとめてください。

